# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_screen.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from ast import expr_context
from PyQt5 import QtCore, QtGui, QtWidgets
from Client import Client
import time
import cv2
import numpy as np
import pygame
from pygame.locals import *
# from utils.video_stream_new import VideoStream

from PyQt5.QtCore import pyqtSignal, QTimer, Qt
from PyQt5.QtGui import QPixmap, QFont, QImage
from PyQt5.QtWidgets import QHBoxLayout, QLabel, QSizePolicy, QVBoxLayout
from PyQt5.QtWidgets import QMainWindow, QWidget, QPushButton, QStyle
from PIL.ImageQt import ImageQt
import numpy as np



class ClientWindow(QMainWindow):
    _update_image_signal = pyqtSignal()
    def __init__(
            self,
            rtspServerHost,
            rtspServerPort,
            file_flag=0,
            parent=None):
        super(ClientWindow, self).__init__(parent)
        # self.Client = Client(file_name, host_address, host_port, rtp_port)
        # self.Client = Client(file_list[file_flag], host_address, host_port, rtp_port)
        # self.Client = Client('192.168.0.227',3000)
        self.Client = Client(rtspServerHost,rtspServerPort)
        self.Client.connect_rtsp_server()    
        self.file_list = self.Client.get_file_list()

        self.file_name_font_size = 50
        
        #self.host_address = host_address
        #self.host_port = host_port
        #self.rtp_port = rtp_port

        self._update_image_signal.connect(self.update_image)
        self._update_image_timer = QTimer()
        self._update_image_timer.timeout.connect(self._update_image_signal.emit)

        # self.file_list = file_list
        self.file_flag = file_flag

        self.speed_list = [1,2,4]
        self.speed_flag = 0

        self.setupUi()
        
        # self.frame_list = LIST_FUNC(self.host_address, self.host_port)
        self.frame_flag=1


        edge = 500

        filt1 = np.linspace(0.2,0.7,edge)
        filt2 = np.ones((45000-edge*2,))
        filt3 = np.linspace(0.7,0.2,edge)

        self.filt = np.concatenate((filt1, filt2, filt3), axis = None)
        print('filter shape: ' , self.filt.shape)


    def setButtonStat(self,button,stat):
        if stat==True:
            button.setStyleSheet("color: white;"
                        "background-color: black;"
                        "selection-background-color: blue;")
            button.setEnabled(True)
        elif stat == False:
            button.setStyleSheet("color: white;"
                        "background-color: gray;"
                        "selection-background-color: blue;")
            button.setEnabled(False)

    def set_menu_layout(self):
        control_layout = QHBoxLayout()
        control_layout.setContentsMargins(0, 0, 0, 0)
        self.pushButton_5 = QtWidgets.QPushButton()
        # self.pushButton_5.setGeometry(QtCore.QRect(10, 200, 81, 32))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.handle_PREVIOUS)
        self.setButtonStat(self.pushButton_5, True)
        control_layout.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton()
        # self.pushButton_6.setGeometry(QtCore.QRect(710, 200, 71, 32))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.handle_NEXT)
        self.setButtonStat(self.pushButton_6, True)
        control_layout.addWidget(self.pushButton_6)
        self.check_Button = QtWidgets.QPushButton()
        # self.pushButton_6.setGeometry(QtCore.QRect(710, 200, 71, 32))
        self.check_Button.setObjectName("checkButton")
        self.check_Button.clicked.connect(self.handle_CHECK)
        self.setButtonStat(self.check_Button, True)
        control_layout.addWidget(self.check_Button)
        control_layout.setAlignment(Qt.AlignCenter)
        layout = QVBoxLayout()
        layout.addWidget(self.file_name_label)
        layout.addLayout(control_layout)

        self.retranslateUi()

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)
        self.central_widget.setLayout(layout)

    def set_video_layout(self):
        control_layout = QHBoxLayout()
        control_layout.setContentsMargins(0, 0, 0, 0)
        # control_layout.addWidget(self.pushButton)
        # control_layout.addWidget(self.pushButton_2)
        # control_layout.addWidget(self.pushButton_3)
        self.pushButton_2 = QtWidgets.QPushButton()
        # self.pushButton_2.setEnabled(False)
        # self.setButtonStat(self.pushButton_2, False)
        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.pushButton_2.clicked.connect(self.handle_START_PAUSE)
        control_layout.addWidget(self.pushButton_2)

        self.pushButton_4 = QtWidgets.QPushButton()
        # self.pushButton_4.setGeometry(QtCore.QRect(550, 460, 113, 32))
        self.pushButton_4.setObjectName("pushButton_4")
        # self.pushButton_4.setEnabled(False)
        self.setButtonStat(self.pushButton_4, False)
        self.pushButton_4.clicked.connect(self.handle_TEARDOWN)
        control_layout.addWidget(self.pushButton_4)
        # control_layout.addWidget(self.speed_Button)
        # self.setButtonStat(self.pushButton, True)

        self.Video_Box = QLabel()
        self.Video_Box.resize(120, 80)
        self.retranslateUi()
        screen_layout = QVBoxLayout()
        screen_layout.addWidget(self.Video_Box)
        screen_layout.addLayout(control_layout)
        screen_layout.setAlignment(Qt.AlignCenter)

        layout = QVBoxLayout()
        layout.addWidget(self.file_name_label)
        layout.addLayout(screen_layout)
        print("video layout")

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)
        self.central_widget.setLayout(layout)
            
    def setupUi(self):
        # MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(800, 600)
        # self.centralwidget = QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")
        self.file_name_label = QLabel('Arial font', self)
        self.file_name_label.setFont(QFont('Arial', self.file_name_font_size))
        self.file_name_label.setAlignment(Qt.AlignCenter)
        self.file_name_label.setText(self.file_list[self.file_flag].split(".")[0])
        
        # self.pushButton = QtWidgets.QPushButton()
        # self.pushButton.setGeometry(QtCore.QRect(130, 460, 113, 32))
        # self.pushButton.setObjectName("pushButton")
        
        # self.pushButton.setEnabled(True)
        # self.setButtonStat(self.pushButton, True)
        # self.pushButton.clicked.connect(self.handle_SETUP)
        
        self.pushButton_2 = QtWidgets.QPushButton()
        # self.pushButton_2.setEnabled(False)
        # self.setButtonStat(self.pushButton_2, False)
        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.pushButton_2.clicked.connect(self.handle_START_PAUSE)
        

        # self.pushButton_3 = QtWidgets.QPushButton()
        # # self.pushButton_3.setEnabled(False)
        # self.setButtonStat(self.pushButton_3, False)
        # self.pushButton_3.clicked.connect(self.handle_PAUSE)
        
        
        self.pushButton_4 = QtWidgets.QPushButton()
        # self.pushButton_4.setGeometry(QtCore.QRect(550, 460, 113, 32))
        self.pushButton_4.setObjectName("pushButton_4")
        # self.pushButton_4.setEnabled(False)
        self.setButtonStat(self.pushButton_4, False)
        self.pushButton_4.clicked.connect(self.handle_TEARDOWN)
        

        self.pushButton_5 = QtWidgets.QPushButton()
        # self.pushButton_5.setGeometry(QtCore.QRect(10, 200, 81, 32))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.handle_PREVIOUS)
        self.setButtonStat(self.pushButton_5, True)

        self.pushButton_6 = QtWidgets.QPushButton()
        # self.pushButton_6.setGeometry(QtCore.QRect(710, 200, 71, 32))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.handle_NEXT)
        self.setButtonStat(self.pushButton_6, True)

        self.check_Button = QtWidgets.QPushButton()
        # self.pushButton_6.setGeometry(QtCore.QRect(710, 200, 71, 32))
        self.check_Button.setObjectName("checkButton")
        self.check_Button.clicked.connect(self.handle_CHECK)
        self.setButtonStat(self.check_Button, True)

        self.speed_Button = QtWidgets.QPushButton()
        # self.pushButton_6.setGeometry(QtCore.QRect(710, 200, 71, 32))
        self.speed_Button.setObjectName("speedButton")
        self.speed_Button.clicked.connect(self.handle_SPEED)
        self.setButtonStat(self.speed_Button, True)

        self.Video_Box = QLabel()
        self.Video_Box.resize(120, 80)
        self.retranslateUi()

        self.central_widget = QWidget(self)
        # self.setCentralWidget(self.central_widget)

        self.set_menu_layout()
        self.STATE = "PAUSE"
        

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        # MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        # self.pushButton.setText(_translate("MainWindow", " SETUP"))
        # self.pushButton_2.setText(_translate("MainWindow", "START"))
        # self.pushButton_3.setText(_translate("MainWindow", "PAUSE"))
        self.pushButton_4.setText(_translate("MainWindow", "TEARDOWN"))
        self.pushButton_5.setText(_translate("MainWindow", "previous"))
        self.pushButton_6.setText(_translate("MainWindow", "next"))
        self.check_Button.setText(_translate("MainWindow", "check"))
        self.speed_Button.setText(_translate("MainWindow", "speed"))

    # def get_next_frame(self):
    #     frame = self.frame_list[self.frame_flag]
    #     print("len: ", len(self.frame_list))
    #     print(type(frame))
    #     # print(frame)
    #     self.frame_flag+=1
    #     # time.sleep(3)
    #     return frame
    
    def update_image(self):
        if self.STATE != "START":
            return
        # frame = self.Client.get_next_frame()
        dataTuple = self.Client.receive_rtp_packet()
        self.max_width = 600

        if dataTuple:
            data, dataType = dataTuple
            if data is not None and dataType == "IMAGE":
                # pix = QPixmap.fromImage(ImageQt(frame[0]).copy())
                # pix = QPixmap(frame)
                height, width, channel = data.shape
                bytesPerLine = 3 * width
                # width = self.max_width
                # height = self.max_width*(height/width)
                pix = QImage(data.data, width, height, bytesPerLine, QImage.Format_RGB888)
                pix = QPixmap(pix)
                pix = pix.scaledToHeight(500)
                self.Video_Box.setPixmap(pix)
                print("update_image")
                # time.sleep(0.5)
            elif data is not None and dataType == "AUDIO":
                print('='*10+"AUDIO"+'='*10)
                soundArray = np.frombuffer(data, dtype='int16') 
                print(soundArray.shape)
                print(soundArray.dtype)
                try:
                    soundArray = np.multiply(soundArray, self.filt).astype(np.int16)
                except:
                    pass

                soundwav = pygame.mixer.Sound(soundArray)    
                soundwav.play()
            else:
                print("Frame None")
                self.STATE = 'IDLE'
                self.handle_TEARDOWN()
        else:
            print("Frame None")
            self.STATE = 'IDLE'
            self.handle_TEARDOWN()


    def RTP_setup(self):
        
        self.Client.setup(self.file_list[self.file_flag])

        self._update_image_timer.start(1000//30)
        print("f")

    def handle_SETUP(self):

        

        self.RTP_setup()
        print("SETUP button clicked")
        # self.setButtonStat(self.pushButton, False)
        # self.setButtonStat(self.pushButton_2, True)
        self.pushButton_2.setEnabled(True)
        # self.setButtonStat(self.pushButton_3, False)
        self.setButtonStat(self.pushButton_4, True)
        self.setButtonStat(self.speed_Button, True)


    # def handle_START(self):
    #     print("START button clicked")
    #     # self.Client.send_play_request()
    #     self.STATE="START"
    #     # self.start_video()
    #     # self.GOGO()
    #     # self.setButtonStat(self.pushButton_2, False)
    #     self.setButtonStat(self.pushButton_3, True)
    #     self.setButtonStat(self.pushButton_4, True)

    #     self.Client.play(self.file_list[self.file_flag])

    # def handle_PAUSE(self):
    #     print("PAUSE button clicked")
    #     # self.Client.send_pause_request()
    #     self.STATE="PAUSE"
    #     self.setButtonStat(self.pushButton_2, True)
    #     self.setButtonStat(self.pushButton_3, False)
    #     self.setButtonStat(self.pushButton_4, True)

    #     self.Client.pause(self.file_list[self.file_flag])

    def handle_START_PAUSE(self):  # same button now
        print("START/PAUSE button clicked")
        # self.Client.send_play_request()
        if self.STATE=="START":
            self.STATE="PAUSE"
            self.pushButton_2.setIcon(
                self.style().standardIcon(QStyle.SP_MediaPlay)
            )
            self.Client.pause(self.file_list[self.file_flag])

        # elif self.STATE=="PAUSE":
        else:
            self.STATE="START"
            self.pushButton_2.setIcon(
                self.style().standardIcon(QStyle.SP_MediaPause)
            )
            self.Client.play(self.file_list[self.file_flag])
        # self.start_video()
        # self.GOGO()
        # self.setButtonStat(self.pushButton_2, False)
        # self.setButtonStat(self.pushButton_3, True)
        # self.setButtonStat(self.pushButton_4, True)

        self.Client.play(self.file_list[self.file_flag])

    
    def handle_TEARDOWN(self):
        print("TEARDOWN button clicked")
        # self.Client.send_teardown_request()
        # self.pushButton.setEnabled(True)
        # self.setButtonStat(self.pushButton, True)
        # self.setButtonStat(self.pushButton_2, False)
        self.pushButton_2.setEnabled(False)
        # self.setButtonStat(self.pushButton_3, False)
        self.setButtonStat(self.pushButton_4, False)
        self.Client.teardown(self.file_list[self.file_flag])
        self.STATE = "SETUP"
        self.set_menu_layout()
        # self.STATE = 'IDLE'
       #exit(0)

    def handle_PREVIOUS(self):
        self.file_flag = (self.file_flag - 1)%len(self.file_list)
        # self.Client = Client(self.file_list[self.file_flag], self.host_address, self.host_port, self.rtp_port)
        self.file_name_label.setText(self.file_list[self.file_flag].split(".")[0])
        print("PREVIOUS button clicked")
        
    def handle_NEXT(self):
        self.file_flag = (self.file_flag + 1)%len(self.file_list)
        # self.Client = Client(self.file_list[self.file_flag], self.host_address, self.host_port, self.rtp_port)
        self.file_name_label.setText(self.file_list[self.file_flag].split(".")[0])
        print("NEXT button clicked")

    def handle_CHECK(self):
        self.set_video_layout()
        file_name=self.file_list[self.file_flag]
        #self.Client.send_file_name(file_name)
        print("CHECK button clicked")
        self.handle_SETUP()

    def handle_SPEED(self):
        #self.Client.send_change_speed(2)
        print("DOUBLE speed")

# pushButton   : SETUP
# pushButton_2 : START
# pushButton_3 : PAUSE
# pushButton_4 : TEARDOWN

# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
